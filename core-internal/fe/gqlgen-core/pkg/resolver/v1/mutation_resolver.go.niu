package graph

import (
	"context"
	"log"

	v1 "github.com/mvp-eXpress/3g-todo-fullstack/core-internal/be/repository/db/pkg/api/v1"

	gqlgen_core "github.com/mvp-eXpress/3g-todo-fullstack/core-internal/fe/gqlgen-core"
	"google.golang.org/grpc"
)

type gc struct {
	conn *grpc.ClientConn
}

type Mutation interface {
	Close()
	getCollections(ctx context.Context) ([]*gqlgen_core.Collection, error)
}

func NewGrpcClient(url string) (Mutation, error) {
	conn, err := grpc.Dial(url, grpc.WithInsecure())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	return &gc{conn}, nil
}

func (g *gc) Close() {
	g.Close()

}
func (g *gc) getCollections(ctx context.Context) ([]*gqlgen_core.Collection, error) {
	c := v1.NewMongoOPServiceClient(g.conn)
	// ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	// defer cancel()
	res, err := c.ListCollections(ctx, nil)

	if err != nil {
		log.Fatalf("ListCollections failed: %v", err)
	}
	log.Printf("ListCollections result: <%+v>\n\n", res)
	r := []*gqlgen_core.Collection{}
	for _, coll := range res.Collections {
		r = append(r, &gqlgen_core.Collection{
			ID:   coll.Id,
			Host: coll.Host,
			Name: coll.Name,
		})
	}
	return r, nil
}
