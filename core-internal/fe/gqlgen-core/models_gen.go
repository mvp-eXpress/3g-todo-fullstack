// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgen_core

import (
	"fmt"
	"io"
	"strconv"
)

type Collection struct {
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	Host        string        `json:"host"`
	FieldValues []*FieldValue `json:"fieldValues"`
}

type CreateCollectionInput struct {
	Name        string             `json:"name"`
	Host        string             `json:"host"`
	FieldValues []*FieldValueInput `json:"fieldValues"`
}

type FieldValue struct {
	ValueType *ValueType `json:"valueType"`
	FieldName *string    `json:"fieldName"`
	IsUnique  *bool      `json:"isUnique"`
	IsIndexed *bool      `json:"isIndexed"`
}

type FieldValueInput struct {
	ValueType *ValueType `json:"valueType"`
	FieldName *string    `json:"fieldName"`
	IsUnique  *bool      `json:"isUnique"`
	IsIndexed *bool      `json:"isIndexed"`
}

type ValueType string

const (
	ValueTypeBoolean   ValueType = "BOOLEAN"
	ValueTypeDouble    ValueType = "DOUBLE"
	ValueTypeInt32     ValueType = "INT32"
	ValueTypeInt64     ValueType = "INT64"
	ValueTypeString    ValueType = "STRING"
	ValueTypeTimestamp ValueType = "TIMESTAMP"
)

func (e ValueType) IsValid() bool {
	switch e {
	case ValueTypeBoolean, ValueTypeDouble, ValueTypeInt32, ValueTypeInt64, ValueTypeString, ValueTypeTimestamp:
		return true
	}
	return false
}

func (e ValueType) String() string {
	return string(e)
}

func (e *ValueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ValueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VALUE_TYPE", str)
	}
	return nil
}

func (e ValueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
